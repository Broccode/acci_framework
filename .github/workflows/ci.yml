name: CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  validate:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check CHANGELOG.md update
        if: github.event_name == 'pull_request'
        run: |
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "CHANGELOG.md" || {
            echo "Error: CHANGELOG.md must be updated"
            exit 1
          }

      - name: Validate EditorConfig
        run: |
          npm install -g editorconfig-checker
          editorconfig-checker -exclude ".*\/bin\/.*" -format github-actions -color src/ crates/

      - name: Validate Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v13
        continue-on-error: true
        with:
          globs: "**/*.md"

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        rust: [stable, nightly]
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          cargo install cargo-cyclonedx

      - name: Run security audit
        run: |
          # Run audit and generate report
          cargo audit --ignore RUSTSEC-2023-0071 --json | tee audit-report.json
          echo "# Security Audit Report" > security-report.md
          echo "## Vulnerabilities" >> security-report.md
          jq -r '.vulnerabilities[] | "- " + .advisory.title + " (" + .advisory.id + ")"' audit-report.json >> security-report.md || true

      - name: Check dependencies
        run: |
          # Check dependencies and licenses
          cargo deny check
          echo "## Dependency Check" >> security-report.md
          echo "âœ“ All dependency checks passed" >> security-report.md

      - name: Generate SBOM
        run: |
          # Generate CycloneDX SBOM
          cargo cyclonedx --format json --override-filename bom
          echo "## Software Bill of Materials" >> security-report.md
          echo "- Generated: $(date)" >> security-report.md
          echo "- Format: CycloneDX" >> security-report.md
          echo "- Components: $(jq '.components | length' bom.json)" >> security-report.md || echo "- Components: Count not available" >> security-report.md

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.md
            audit-report.json
            bom.json

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: security
    strategy:
      matrix:
        rust: [stable, nightly]
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Build workspace
        run: cargo build --workspace --all-features

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.rust }}-${{ matrix.os }}
          path: |
            target/debug/
            target/doc/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Build documentation
        run: |
          # Build rustdoc documentation
          cargo doc --workspace --all-features --no-deps

          # Create index.html
          echo '<meta http-equiv="refresh" content="0; url=acci/index.html">' > target/doc/index.html

          # Copy additional documentation
          cp -r docs target/doc/

          # Create documentation artifact
          tar -czf documentation.tar.gz -C target/doc .

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
