name: Test Suite

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info
  DATABASE_URL: postgres://acci:acci@localhost:15432/acci_test
  SQLX_OFFLINE: true
  # Coverage thresholds aligned with documentation
  UNIT_TEST_LINE_COVERAGE: 90
  UNIT_TEST_BRANCH_COVERAGE: 85
  INTEGRATION_TEST_COVERAGE: 80
  MUTATION_TEST_SCORE: 80

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: acci
          POSTGRES_DB: acci_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          cargo install cargo-llvm-cov cargo-mutants cargo-fuzz cargo-nextest

      - name: Run unit tests with nextest
        id: unit_tests
        run: |
          NEXTEST_JUNIT_REPORT=output.xml \
          cargo nextest run --workspace --all-features --lib --bins --exclude acci_tests \
            2>&1 | tee test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      # - name: Run property-based tests
      #   run: |
      #     NEXTEST_JUNIT_REPORT=property-test-output.xml \
      #     cargo nextest run --workspace --all-features property_tests

      # - name: Run mutation tests
      #   run: |
      #     cargo mutants --workspace --all-features

      - name: Generate coverage reports
        if: success()
        run: |
          # Create output directory
          mkdir -p target/coverage-report

          # Generate LCOV report for unit tests
          cargo llvm-cov --lib --bins --all-features --workspace --exclude acci_tests \
            --lcov --output-path target/coverage-report/unit-lcov.info

          # Generate HTML report for unit tests
          cargo llvm-cov --lib --bins --all-features --workspace --exclude acci_tests \
            --html --output-dir target/coverage-report/unit-html

          # Generate JSON report for unit tests
          cargo llvm-cov --lib --bins --all-features --workspace --exclude acci_tests \
            --json --output-path target/coverage-report/unit-coverage.json

          # Generate summary for unit tests
          cargo llvm-cov --lib --bins --all-features --workspace --exclude acci_tests \
            --summary-only > target/coverage-report/unit-coverage-summary.txt

          # Generate LCOV report for integration tests
          cargo llvm-cov -p acci_tests --lib --all-features \
            --lcov --output-path target/coverage-report/integration-lcov.info

          # Generate HTML report for integration tests
          cargo llvm-cov -p acci_tests --lib --all-features \
            --html --output-dir target/coverage-report/integration-html

          # Generate JSON report for integration tests
          cargo llvm-cov -p acci_tests --lib --all-features \
            --json --output-path target/coverage-report/integration-coverage.json

          # Generate summary for integration tests
          cargo llvm-cov -p acci_tests --lib --all-features \
            --summary-only > target/coverage-report/integration-coverage-summary.txt

      # - name: Check coverage thresholds
      #   if: success()
      #   run: |
      #     # Check unit test coverage
      #     unit_line_coverage=$(jq -r '.totals.lines.percent' target/coverage-report/unit-coverage.json)
      #     unit_branch_coverage=$(jq -r '.totals.branches.percent' target/coverage-report/unit-coverage.json)

      #     if (( $(echo "$unit_line_coverage < $UNIT_TEST_LINE_COVERAGE" | bc -l) )); then
      #       echo "::error::Unit test line coverage ${unit_line_coverage}% below threshold ${UNIT_TEST_LINE_COVERAGE}%"
      #       exit 1
      #     fi

      #     if (( $(echo "$unit_branch_coverage < $UNIT_TEST_BRANCH_COVERAGE" | bc -l) )); then
      #       echo "::error::Unit test branch coverage ${unit_branch_coverage}% below threshold ${UNIT_TEST_BRANCH_COVERAGE}%"
      #       exit 1
      #     fi

      #     # Check integration test coverage
      #     integration_coverage=$(jq -r '.totals.lines.percent' target/coverage-report/integration-coverage.json)

      #     if (( $(echo "$integration_coverage < $INTEGRATION_TEST_COVERAGE" | bc -l) )); then
      #       echo "::error::Integration test coverage ${integration_coverage}% below threshold ${INTEGRATION_TEST_COVERAGE}%"
      #       exit 1
      #     fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            output.xml
            test-output.log
            target/coverage-report/

      - name: Upload coverage to Coveralls
        if: success()
        uses: coverallsapp/github-action@v2
        with:
          file: target/coverage-report/unit-lcov.info
          parallel: true
          flag-name: unit-tests

      - name: Upload integration coverage to Coveralls
        if: success()
        uses: coverallsapp/github-action@v2
        with:
          file: target/coverage-report/integration-lcov.info
          parallel: true
          flag-name: integration-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: acci
          POSTGRES_DB: acci_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          cargo install cargo-nextest

      - name: Run integration tests with nextest
        id: integration_tests
        run: |
          mkdir -p test-logs
          NEXTEST_JUNIT_REPORT=integration-output.xml \
          cargo nextest run -p acci_tests --lib --all-features \
            2>&1 | tee test-logs/integration-test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            integration-output.xml
            test-logs/

  # performance:
  #   name: Performance Tests
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, integration-tests]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Required for benchmark comparison

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Cache dependencies
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-directories: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target/

  #     - name: Run criterion benchmarks
  #       run: |
  #         cargo criterion --workspace --message-format=json > benchmark-results.json

  #     - name: Run k6 load tests
  #       run: |
  #         sudo gpg -k
  #         sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
  #         echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
  #         sudo apt-get update
  #         sudo apt-get install k6
  #         k6 run tests/performance/load-test.js --out json=k6-results.json

  #     - name: Upload performance results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: performance-results
  #         path: |
  #           benchmark-results.json
  #           k6-results.json

  # security:
  #   name: Security Tests
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, integration-tests]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Cache dependencies
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-directories: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target/

  #     - name: Install security tools
  #       run: |
  #         cargo install cargo-fuzz cargo-audit cargo-deny cargo-cyclonedx

  #     - name: Run security tests
  #       run: |
  #         # Run fuzzing tests
  #         cargo fuzz run api-fuzzer -- -max_total_time=300

  #         # Run dependency audit
  #         cargo audit --json > audit-results.json

  #         # Run dependency policy check
  #         cargo deny check --format=json > deny-results.json

  #         # Generate SBOM
  #         cargo cyclonedx --output sbom.json --format json

  #     - name: Upload security results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-results
  #         path: |
  #           audit-results.json
  #           deny-results.json
  #           sbom.json
