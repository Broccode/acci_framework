name: Test Suite

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info
  DATABASE_URL: postgres://acci:acci@localhost:15432/acci_test
  SQLX_OFFLINE: true
  # Coverage thresholds aligned with documentation
  UNIT_TEST_LINE_COVERAGE: 90
  UNIT_TEST_BRANCH_COVERAGE: 85
  INTEGRATION_TEST_COVERAGE: 80
  MUTATION_TEST_SCORE: 80

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: acci
          POSTGRES_DB: acci_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          targets: wasm32-unknown-unknown

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          cargo install cargo-llvm-cov cargo-mutants cargo-fuzz cargo-nextest

      - name: Run unit tests with nextest
        id: unit_tests
        run: |
          cargo nextest run --workspace --all-features --lib --bins --exclude acci_tests \
            --junit output.xml 2>&1 | tee test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Run property-based tests
        run: |
          cargo nextest run --workspace --all-features property_tests \
            --junit property-test-output.xml

      - name: Run mutation tests
        run: |
          cargo mutants --workspace --all-features

      - name: Generate coverage reports
        if: always()
        run: |
          mkdir -p target/coverage-report
          cargo llvm-cov --lib --bins --all-features --workspace \
            --lcov --output-path target/coverage-report/lcov.info \
            --html --output-dir target/coverage-report/html \
            --json --output-path target/coverage-report/coverage.json \
            --summary-only > target/coverage-report/coverage-summary.txt

      - name: Check coverage thresholds
        if: always()
        run: |
          line_coverage=$(jq -r '.totals.lines.percent' target/coverage-report/coverage.json)
          branch_coverage=$(jq -r '.totals.branches.percent' target/coverage-report/coverage.json)

          if (( $(echo "$line_coverage < $UNIT_TEST_LINE_COVERAGE" | bc -l) )); then
            echo "::error::Line coverage ${line_coverage}% below threshold ${UNIT_TEST_LINE_COVERAGE}%"
            exit 1
          fi

          if (( $(echo "$branch_coverage < $UNIT_TEST_BRANCH_COVERAGE" | bc -l) )); then
            echo "::error::Branch coverage ${branch_coverage}% below threshold ${UNIT_TEST_BRANCH_COVERAGE}%"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            output.xml
            property-test-output.xml
            test-output.log
            target/coverage-report/

      - name: Upload coverage to Coveralls
        if: always()
        uses: coverallsapp/github-action@v2
        with:
          file: target/coverage-report/lcov.info

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: acci
          POSTGRES_PASSWORD: acci
          POSTGRES_DB: acci_test
        ports:
          - 15432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install chromium

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Run integration tests with nextest
        id: integration_tests
        run: |
          cargo nextest run -p acci_tests --lib --all-features \
            --junit integration-output.xml 2>&1 | tee test-logs/integration-test-output.log
          echo "status=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Run E2E tests
        run: |
          cargo nextest run --test '*' --features e2e \
            --junit e2e-output.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            integration-output.xml
            e2e-output.xml
            test-logs/

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for benchmark comparison

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Run criterion benchmarks
        run: |
          cargo criterion --workspace --message-format=json > benchmark-results.json

      - name: Run k6 load tests
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          k6 run tests/performance/load-test.js --out json=k6-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            benchmark-results.json
            k6-results.json

  security:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target/

      - name: Install security tools
        run: |
          cargo install cargo-fuzz cargo-audit cargo-deny cargo-cyclonedx

      - name: Run security tests
        run: |
          # Run fuzzing tests
          cargo fuzz run api-fuzzer -- -max_total_time=300

          # Run dependency audit
          cargo audit --json > audit-results.json

          # Run dependency policy check
          cargo deny check --format=json > deny-results.json

          # Generate SBOM
          cargo cyclonedx --output sbom.json --format json

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            audit-results.json
            deny-results.json
            sbom.json
